--///////////////////////////////////////////////////////////////////////////

-- @ Soumyajit Langal (WEL IITB)
-- The skeleton code for Mid-Semester EE214. 

--///////////////////////////////////////////////////////////////////////////

library ieee;
use ieee.std_logic_1164.all;

entity atm is
-- port declaration 
 port(I : in std_logic_vector(7 downto 0);
		P: out std_logic_vector(1 downto 0);
		A: out std_logic_vector(1 downto 0);
		B: out std_logic;
		C: out std_logic_vector(5 downto 0));
end entity atm;

architecture struct of atm is

component div is
generic(
			N : integer:=8; -- operand width
			NN : integer:=16 -- result width
        );
port (
			Nu: in std_logic_vector(N-1 downto 0);-- Nu (read numerator) is dividend
			D: in std_logic_vector(N-1 downto 0);-- D (read Denominator) is divisor
			RQ: out std_logic_vector(NN-1 downto 0)--upper N bits of RQ will have remainder and lower N bits will have quotient
) ;
end component;

-- write code here
signal ty: std_logic_vector(7 downto 0); t1,t2: std_logic;
begin

-- Write code here(don't worry about generic, just ignore it and do normal port mapping for div)
div_1: div
		port map(Nu(7 downto 0)=>I(7 downto 0), D=>"01100100", RQ(1 downto 0)=>A, RQ(15 downto 8)=>ty);
		
div_2: div
		port map(Nu=>ty, D=>"00110010", RQ(0)=>B, RQ(5 downto 0)=>C);
		
or1: OR_2
		port map(A=>A(1), B=>A(0), Y=>t1);
		
inv1: INVERTER
		port map(A=>B, Y=>t2);
		
or2: OR_2
		port map(A=>t1, B=>B, Y=>P(1));
		
or3: OR_2
		port map(A=>t1, B=>t2, Y=>P(0));		
		
		

end struct;
